klasse
klasse <- rep(1:nklassen, each = nschueler)
klasse
table(klasse)
klasse
uebung <- sample(c(0:30), n, replace = TRUE)
hist(uebung)
uebung <- sample(c(0:30), n, replace = TRUE)
hist(uebung)
hist(uebung)
uebung <- sample(c(0:30), n, replace = TRUE)
uebung <- sample(c(0:30), n, replace = TRUE)
hist(uebung)
rtnorm <- function(n, mean, sd, a = -Inf, b = Inf){
qnorm(runif(n, pnorm(a, mean, sd), pnorm(b, mean, sd)), mean, sd)
}
sd_uebung = 5
uebung <- round(rtnorm(n, mean = 15, sd = sd_uebung, a = 0, b = 30))
hist(uebung)
klasse <- rep(1:nklassen, each = nschueler)
klasse
levels(klasse) <- c(1:nklassen)
# Creating dataframe
klasse <- as.factor(klasse)
levels(klasse) <- c(1:nklassen)
didaktik
gen_ml_data <- function(nschueler = 50,
nklassen = 300,
sd_intercept = 2,
sd_slope = 0,
corr = 0,
sd_error = 5,
sd_didaktik = 3,
sd_uebung = 5,
y00 = 15,
y10 = 0.35,
y01 = 0.35){
rtnorm <- function(n, mean, sd, a = -Inf, b = Inf){
qnorm(runif(n, pnorm(a, mean, sd), pnorm(b, mean, sd)), mean, sd)
}
# Creating Variables
n <- nschueler * nklassen
error <- rnorm(n, mean = 0, sd = sd_error)
uebung <- round(rtnorm(n, mean = 15, sd = sd_uebung, a = 0, b = 30))
didaktik <- rnorm(nklassen, mean = 0, sd = sd_didaktik)
klasse <- rep(1:nklassen, each = nschueler)
# Creating random effects of klassen
covar01 <- corr * sqrt(sd_intercept^2 * sd_slope^2)
effekte_cov_matrix <- matrix(c(sd_intercept^2,
covar01,
covar01,
sd_slope^2
), 2, 2)
effekte <- mvrnorm(n = nklassen, mu = c(0,0),
Sigma = effekte_cov_matrix, empirical = TRUE)
random_intercept <- effekte[,1]
random_slope <- effekte[,2]
# Calculating individual leistung score
for (i in 1:n){
leistung[i] <- y00 +
y10 * uebung +
y01 * didaktik[klasse[i]] +
random_intercept[klasse[i]] +
random_slope[klasse[i]] * uebung +
error[i]
}
# Creating dataframe
klasse <- as.factor(klasse)
levels(klasse) <- c(1:nklassen)
ml_data <- data.frame(klasse, uebung, didaktik, leistung, random_intercept, random_slope)
return(ml_data)
}
set.seed(4)
test <- gen_ml_data()
# Calculating individual leistung score
leistung <- numeric(n)
for (i in 1:n){
leistung[i] <- y00 +
y10 * uebung +
y01 * didaktik[klasse[i]] +
random_intercept[klasse[i]] +
random_slope[klasse[i]] * uebung +
error[i]
}
gen_ml_data <- function(nschueler = 50,
nklassen = 300,
sd_intercept = 2,
sd_slope = 0,
corr = 0,
sd_error = 5,
sd_didaktik = 3,
sd_uebung = 5,
y00 = 15,
y10 = 0.35,
y01 = 0.35){
rtnorm <- function(n, mean, sd, a = -Inf, b = Inf){
qnorm(runif(n, pnorm(a, mean, sd), pnorm(b, mean, sd)), mean, sd)
}
# Creating Variables
n <- nschueler * nklassen
error <- rnorm(n, mean = 0, sd = sd_error)
uebung <- round(rtnorm(n, mean = 15, sd = sd_uebung, a = 0, b = 30))
didaktik <- rnorm(nklassen, mean = 0, sd = sd_didaktik)
klasse <- rep(1:nklassen, each = nschueler)
# Creating random effects of klassen
covar01 <- corr * sqrt(sd_intercept^2 * sd_slope^2)
effekte_cov_matrix <- matrix(c(sd_intercept^2,
covar01,
covar01,
sd_slope^2
), 2, 2)
effekte <- mvrnorm(n = nklassen, mu = c(0,0),
Sigma = effekte_cov_matrix, empirical = TRUE)
random_intercept <- effekte[,1]
random_slope <- effekte[,2]
# Calculating individual leistung score
leistung <- numeric(n)
for (i in 1:n){
leistung[i] <- y00 +
y10 * uebung +
y01 * didaktik[klasse[i]] +
random_intercept[klasse[i]] +
random_slope[klasse[i]] * uebung +
error[i]
}
# Creating dataframe
klasse <- as.factor(klasse)
levels(klasse) <- c(1:nklassen)
ml_data <- data.frame(klasse, uebung, didaktik, leistung, random_intercept, random_slope)
return(ml_data)
}
set.seed(4)
test <- gen_ml_data()
warnings()
View(test)
gen_ml_data <- function(nschueler = 50,
nklassen = 300,
sd_intercept = 2,
sd_slope = 0,
corr = 0,
sd_error = 5,
sd_didaktik = 3,
sd_uebung = 5,
y00 = 15,
y10 = 0.35,
y01 = 0.35){
rtnorm <- function(n, mean, sd, a = -Inf, b = Inf){
qnorm(runif(n, pnorm(a, mean, sd), pnorm(b, mean, sd)), mean, sd)
}
# Creating Variables
n <- nschueler * nklassen
error <- rnorm(n, mean = 0, sd = sd_error)
uebung <- round(rtnorm(n, mean = 15, sd = sd_uebung, a = 0, b = 30))
didaktik <- rnorm(nklassen, mean = 0, sd = sd_didaktik)
klasse <- rep(1:nklassen, each = nschueler)
# Creating random effects of klassen
covar01 <- corr * sqrt(sd_intercept^2 * sd_slope^2)
effekte_cov_matrix <- matrix(c(sd_intercept^2,
covar01,
covar01,
sd_slope^2
), 2, 2)
effekte <- mvrnorm(n = nklassen, mu = c(0,0),
Sigma = effekte_cov_matrix, empirical = TRUE)
random_intercept <- effekte[,1]
random_slope <- effekte[,2]
# Calculating individual leistung score
leistung <- numeric(n)
for (i in 1:n){
leistung[i] <- y00 +
y10 * uebung[i] +
y01 * didaktik[klasse[i]] +
random_intercept[klasse[i]] +
random_slope[klasse[i]] * uebung[i] +
error[i]
}
# Creating dataframe
klasse <- as.factor(klasse)
levels(klasse) <- c(1:nklassen)
ml_data <- data.frame(klasse, uebung, didaktik, leistung, random_intercept, random_slope)
return(ml_data)
}
set.seed(4)
test <- gen_ml_data()
dat <- gen_ml_data()
set.seed(4)
dat <- gen_ml_data()
modLM <- lm(Leistung~Uebungen+Lehrkraft, data = dat)
modMLM <- lmer(Leistung~Uebungen+Lehrkraft + (1|Schulklasse), data = dat)
summary(modLM)
modLM <- lm(leistung ~ uebung + didaktik, data = dat)
modMLM <- lmer(leistung ~ uebung + didaktik + (1|klasse), data = dat)
summary(modLM)
summary(modMLM)
summary(modLM)
gen_ml_data <- function(nschueler = 50,
nklassen = 300,
sd_intercept = 2,
sd_slope = 0,
corr = 0,
sd_error = 5,
sd_didaktik = 3,
sd_uebung = 5,
y00 = 15,
y10 = 0.35,
y01 = 0.5){
rtnorm <- function(n, mean, sd, a = -Inf, b = Inf){
qnorm(runif(n, pnorm(a, mean, sd), pnorm(b, mean, sd)), mean, sd)
}
# Creating Variables
n <- nschueler * nklassen
error <- rnorm(n, mean = 0, sd = sd_error)
uebung <- round(rtnorm(n, mean = 15, sd = sd_uebung, a = 0, b = 30))
didaktik <- rnorm(nklassen, mean = 0, sd = sd_didaktik)
klasse <- rep(1:nklassen, each = nschueler)
# Creating random effects of klassen
covar01 <- corr * sqrt(sd_intercept^2 * sd_slope^2)
effekte_cov_matrix <- matrix(c(sd_intercept^2,
covar01,
covar01,
sd_slope^2
), 2, 2)
effekte <- mvrnorm(n = nklassen, mu = c(0,0),
Sigma = effekte_cov_matrix, empirical = TRUE)
random_intercept <- effekte[,1]
random_slope <- effekte[,2]
# Calculating individual leistung score
leistung <- numeric(n)
for (i in 1:n){
leistung[i] <- y00 +
y10 * uebung[i] +
y01 * didaktik[klasse[i]] +
random_intercept[klasse[i]] +
random_slope[klasse[i]] * uebung[i] +
error[i]
}
# Creating dataframe
klasse <- as.factor(klasse)
levels(klasse) <- c(1:nklassen)
ml_data <- data.frame(klasse, uebung, didaktik, leistung, random_intercept, random_slope)
return(ml_data)
}
set.seed(4)
dat <- gen_ml_data()
modLM <- lm(leistung ~ uebung + didaktik, data = dat)
modMLM <- lmer(leistung ~ uebung + didaktik + (1|klasse), data = dat)
summary(modLM)
summary(modMLM)
summary(modLM)
dgp <- function(n_groups = 50,
n_individuals = 30,
beta_0 = 20,
beta_1 = 6, # level 1 effect
beta_2 = 5, # level 2 effect
sd_err = 5, # e_in
sd_random_intercept = 5,
sd_random_slope = 0.1,
sd_x1 = 1,
sd_x2 = 1){
n <- n_groups*n_individuals
err <- rnorm(n, 0, sd_err)
random_intercept <- rnorm(n_groups, 0, sd_random_intercept)
random_slope <- rnorm(n_groups, 0, sd_random_slope)
x1 <- rnorm(n, 0, sd_x1)
x2 <- rnorm(n_groups, 0, sd_x2)
group <- as.factor(rep(1:n_groups, n_individuals))
y <- integer(n)
for(i in 1:n){
y[i] <- beta_0 +
random_intercept[group[i]] +
(beta_1 + random_slope[group[i]]) * x1[i] +
beta_2 * x2[group[i]] +
err[i]
}
dat <- data.frame(Leistung = y, Uebungen = x1, Lehrkraft = x2, Schulklasse = group)
return(dat)
}
set.seed(4)
dat <- dgp()
# some plausibility tests on the data -------------------------------------
# check whether there is variance between groups, residuals are symmetric, Random Intercept has variance
modLM <- lm(Leistung~Uebungen+Lehrkraft, data = dat)
modMLM <- lmer(Leistung~Uebungen+Lehrkraft + (1|Schulklasse), data = dat)
summary(modLM)
summary(modMLM)
gen_ml_data <- function(nschueler = 50,
nklassen = 300,
sd_intercept = 2,
sd_slope = 0,
corr = 0,
sd_error = 5,
sd_didaktik = 5,
sd_uebung = 5,
y00 = 15,
y10 = 0.5,
y01 = 0.5){
rtnorm <- function(n, mean, sd, a = -Inf, b = Inf){
qnorm(runif(n, pnorm(a, mean, sd), pnorm(b, mean, sd)), mean, sd)
}
# Creating Variables
n <- nschueler * nklassen
error <- rnorm(n, mean = 0, sd = sd_error)
uebung <- round(rtnorm(n, mean = 15, sd = sd_uebung, a = 0, b = 30))
didaktik <- rnorm(nklassen, mean = 0, sd = sd_didaktik)
klasse <- rep(1:nklassen, each = nschueler)
# Creating random effects of klassen
covar01 <- corr * sqrt(sd_intercept^2 * sd_slope^2)
effekte_cov_matrix <- matrix(c(sd_intercept^2,
covar01,
covar01,
sd_slope^2
), 2, 2)
effekte <- mvrnorm(n = nklassen, mu = c(0,0),
Sigma = effekte_cov_matrix, empirical = TRUE)
random_intercept <- effekte[,1]
random_slope <- effekte[,2]
# Calculating individual leistung score
leistung <- numeric(n)
for (i in 1:n){
leistung[i] <- y00 +
y10 * uebung[i] +
y01 * didaktik[klasse[i]] +
random_intercept[klasse[i]] +
random_slope[klasse[i]] * uebung[i] +
error[i]
}
# Creating dataframe
klasse <- as.factor(klasse)
levels(klasse) <- c(1:nklassen)
ml_data <- data.frame(klasse, uebung, didaktik, leistung, random_intercept, random_slope)
return(ml_data)
}
set.seed(4)
dat <- gen_ml_data()
modLM <- lm(leistung ~ uebung + didaktik, data = dat)
modMLM <- lmer(leistung ~ uebung + didaktik + (1|klasse), data = dat)
summary(modLM)
summary(modMLM)
summary(modLM)
dat <- gen_ml_data()
View(dat)
didaktik
klasse[i]
klasse
didaktik[klasse[i]]
didaktik
set.seed(4)
dat <- dgp()
View(dat)
x2
# Creating dataframe
klasse <- as.factor(klasse)
didaktik
set.seed(4)
dat <- gen_ml_data()
View(dat)
rep(effekte[,1], each = nschueler)
gen_ml_data <- function(nschueler = 50,
nklassen = 300,
sd_intercept = 2,
sd_slope = 0,
corr = 0,
sd_error = 5,
sd_didaktik = 5,
sd_uebung = 5,
y00 = 15,
y10 = 0.5,
y01 = 0.5){
rtnorm <- function(n, mean, sd, a = -Inf, b = Inf){
qnorm(runif(n, pnorm(a, mean, sd), pnorm(b, mean, sd)), mean, sd)
}
# Creating Variables
n <- nschueler * nklassen
error <- rnorm(n, mean = 0, sd = sd_error)
uebung <- round(rtnorm(n, mean = 15, sd = sd_uebung, a = 0, b = 30))
didaktik <- rep(rnorm(nklassen, mean = 0, sd = sd_didaktik), each = nschueler)
klasse <- rep(1:nklassen, each = nschueler)
# Creating random effects of klassen
covar01 <- corr * sqrt(sd_intercept^2 * sd_slope^2)
effekte_cov_matrix <- matrix(c(sd_intercept^2,
covar01,
covar01,
sd_slope^2
), 2, 2)
effekte <- mvrnorm(n = nklassen, mu = c(0,0),
Sigma = effekte_cov_matrix, empirical = TRUE)
random_intercept <- rep(effekte[,1], each = nschueler)
random_slope <- rep(effekte[,2], each = nschueler)
# Calculating individual leistung score
leistung <- numeric(n)
for (i in 1:n){
leistung[i] <- y00 +
y10 * uebung[i] +
y01 * didaktik[i] +
random_intercept[i] +
random_slope[i] * uebung[i] +
error[i]
}
# Creating dataframe
klasse <- as.factor(klasse)
ml_data <- data.frame(klasse, uebung, didaktik, leistung, random_intercept, random_slope)
return(ml_data)
}
set.seed(4)
dat <- gen_ml_data()
View(dat)
modLM <- lm(leistung ~ uebung + didaktik, data = dat)
modMLM <- lmer(leistung ~ uebung + didaktik + (1|klasse), data = dat)
summary(modLM)
summary(modMLM)
View(dat)
gen_ml_data <- function(nschueler = 50,
nklassen = 300,
sd_intercept = 2,
sd_slope = 0,
corr = 0,
sd_error = 5,
sd_didaktik = 5,
sd_uebung = 5,
y00 = 15,
y10 = 0.5,
y01 = 0.5){
# Function for truncated normal distribution
rtnorm <- function(n, mean, sd, a = -Inf, b = Inf){
qnorm(runif(n, pnorm(a, mean, sd), pnorm(b, mean, sd)), mean, sd)
}
# Creating Variables
n <- nschueler * nklassen
error <- rnorm(n, mean = 0, sd = sd_error)
uebung <- round(rtnorm(n, mean = 15, sd = sd_uebung, a = 0, b = 30))
didaktik <- rep(rnorm(nklassen, mean = 0, sd = sd_didaktik), each = nschueler)
klasse <- rep(1:nklassen, each = nschueler)
# Creating random effects of klassen
covar01 <- corr * sqrt(sd_intercept^2 * sd_slope^2)
effekte_cov_matrix <- matrix(c(sd_intercept^2,
covar01,
covar01,
sd_slope^2
), 2, 2)
effekte <- mvrnorm(n = nklassen, mu = c(0,0),
Sigma = effekte_cov_matrix, empirical = TRUE)
random_intercept <- rep(effekte[,1], each = nschueler)
random_slope <- rep(effekte[,2], each = nschueler)
# Calculating individual leistung score
leistung <- numeric(n)
for (i in 1:n){
leistung[i] <- y00 +
y10 * uebung[i] +
y01 * didaktik[i] +
random_intercept[i] +
random_slope[i] * uebung[i] +
error[i]
}
# Creating dataframe
klasse <- as.factor(klasse)
ml_data <- data.frame(klasse, uebung, didaktik, leistung, random_intercept, random_slope)
return(ml_data)
}
test <- gen
test <- gen_ml_data()
View(test)
ggplot(data = dat, aes(x = Schulklasse, y = residLM))+
geom_boxplot()
ggplot(data = dat, aes(x = Schulklasse, y = residMLM))+
geom_boxplot()
gen_ml_data <- function(nschueler = 50,
nklassen = 300,
sd_intercept = 2,
sd_slope = 0,
corr = 0,
sd_error = 5,
sd_didaktik = 5,
sd_uebung = 5,
y00 = 15,
y10 = 0.5,
y01 = 0.5){
# Function for truncated normal distribution
rtnorm <- function(n, mean, sd, a = -Inf, b = Inf){
qnorm(runif(n, pnorm(a, mean, sd), pnorm(b, mean, sd)), mean, sd)
}
# Creating Variables
n <- nschueler * nklassen
error <- rnorm(n, mean = 0, sd = sd_error)
uebung <- round(rtnorm(n, mean = 15, sd = sd_uebung, a = 0, b = 30))
didaktik <- rep(rnorm(nklassen, mean = 0, sd = sd_didaktik), each = nschueler)
klasse <- rep(1:nklassen, each = nschueler)
# Creating random effects of klassen
covar01 <- corr * sqrt(sd_intercept^2 * sd_slope^2)
effekte_cov_matrix <- matrix(c(sd_intercept^2,
covar01,
covar01,
sd_slope^2
), 2, 2)
effekte <- mvrnorm(n = nklassen, mu = c(0,0),
Sigma = effekte_cov_matrix, empirical = TRUE)
random_intercept <- rep(effekte[,1], each = nschueler)
random_slope <- rep(effekte[,2], each = nschueler)
# Calculating individual leistung score
leistung <- numeric(n)
for (i in 1:n){
leistung[i] <- y00 +
y10 * uebung[i] +
y01 * didaktik[i] +
random_intercept[i] +
random_slope[i] * uebung[i] +
error[i]
}
# Creating dataframe
klasse <- as.factor(klasse)
ml_data <- data.frame(klasse, uebung, didaktik, leistung, random_intercept, random_slope)
return(ml_data)
}

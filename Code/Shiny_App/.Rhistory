mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 1)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 1)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 1)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 1)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 1)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 1)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 1)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 1)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 1)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 1)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
leistung <- 15 +
5 * math_lektionen +
0.8 * iq_centered +
random_intercept +
#random_slope * iq_centered +
error
var(data_test$leistung - mean(data_test$leistung))
data_test$leistung - mean(data_test$leistung)
var(data_test$leistung - mean(data_test$leistung))
var(data_test$leistung)
var(data_test$leistung)
simulation_study <- function(niter = 100, sd_intercept = 10, sd_slope = 0,
corr = 0, sd_error = 5){
# loading one simulation function
source("one_simulation_ml.R")
# creating data frame for coefs
coef_models <- data.frame()
# adding coefs for n iterations
for(i in 1:niter){
coef_models <- rbind(coef_models, one_simulation(sd_intercept = sd_intercept,
sd_slope = sd_slope, corr = corr, sd_error))
}
# formatting data frame
colnames(coef_models) <- c("beta_0", "beta_iq", "beta_treatment",
"SE_beta_0", "SE_beta_iq", "SE_beta_treatment", "p_value_0",
"p_value_iq", "p_value_treatment","empirical_icc",
"theoretical_icc", "method")
coef_models[,1:9] <- apply(coef_models[,1:9], 2, as.numeric)
coef_models$sample_nr <- rep(1:niter, each = 3)
return(coef_models)
}
test <- simulation_study(sd_intercept = 10, sd_slope = 0, corr = 0, sd_error = 5)
View(test)
summary(test)
power_lm <- sum(ifelse(test$p_value_treatment[test$method == "lm"] < 0.05, 1, 0))/100
power_rim <- sum(ifelse(test$p_value_treatment[test$method == "rim"] < 0.05, 1, 0))/100
power_rism <- sum(ifelse(test$p_value_treatment[test$method == "rism"] < 0.05, 1, 0))/100
gen_ml_data <- function(n = 2500, nklassen = 50, sd_intercept = 10, sd_slope = 0,
corr = 0, sd_error = 5){
# Creating Level-1 Variables with fixed effects
iq <- rnorm(n, mean = 100, sd = 10)
iq_centered <- iq - 100
# Creating Level-2 Variables
anz_math_lektionen <- sample(c(1:6), nklassen, replace = TRUE)
klasse <- sample(1:nklassen, n, replace = TRUE)
math_lektionen <- c()
for (i in 1:n){
math_lektionen[i] <- anz_math_lektionen[klasse[i]]
}
# Creating random effects of klassen
covar01 <- corr * sqrt(sd_intercept^2 * sd_slope^2)
effekte_cov_matrix <- matrix(c(sd_intercept^2,
covar01,
covar01,
sd_slope^2
), 2, 2)
effekte <- mvrnorm(n = nklassen, mu = c(0,0),
Sigma = effekte_cov_matrix, empirical = TRUE)
effekt_int <- effekte[,1]
effekt_slope <- effekte[,2]
# Creating random effects for Intercept and Slope based on klassen
random_intercept <- numeric(n)
for (i in 1:n){
random_intercept[i] <- effekt_int[klasse[i]]
}
random_slope <- numeric(n)
for (i in 1:n){
random_slope[i] <- effekt_slope[klasse[i]]
}
# Creating random error for individuals
error <- rnorm(n, mean = 0, sd = sd_error)
# Calculating individual leistung score
leistung <- 15 +
5 * math_lektionen +
0.8 * iq_centered +
random_intercept +
#random_slope * iq_centered +
error
# Creating dataframe
klasse <- as.factor(klasse)
levels(klasse) <- paste(1:nklassen, "md", sep = "")
ml_data <- data.frame(klasse, iq_centered, math_lektionen, leistung)
return(ml_data)
}
test <- simulation_study(sd_intercept = 10, sd_slope = 0, corr = 0, sd_error = 5)
data_test <- gen_ml_data(sd_intercept = 10, sd_error = 10)
mlm_icc <- lmer(leistung ~ 1 + (1|klasse), data = data_test)
summary(mlm_icc)
var(data_test$leistung)
346.8246-189.9
test <- simulation_study(sd_intercept = 1, sd_slope = 0, corr = 0, sd_error = 5)
# testing plots and comparing coefs
boxplot(beta_0 ~ method, data = test)
boxplot(beta_iq ~ method, data = test)
boxplot(beta_treatment ~ method, data = test)
boxplot(SE_beta_0 ~ method, data = test)
boxplot(SE_beta_iq ~ method, data = test)
boxplot(SE_beta_treatment ~ method, data = test)
boxplot(p_value_0 ~ method, data = test)
boxplot(p_value_iq ~ method, data = test)
boxplot(p_value_treatment ~ method, data = test)
power_lm <- sum(ifelse(test$p_value_treatment[test$method == "lm"] < 0.05, 1, 0))/100
power_rim <- sum(ifelse(test$p_value_treatment[test$method == "rim"] < 0.05, 1, 0))/100
power_rism <- sum(ifelse(test$p_value_treatment[test$method == "rism"] < 0.05, 1, 0))/100
save(simulation_study(sd_intercept = 0), file = "study_sd_0")
save(simulation_study(sd_intercept = 0), file = "study_sd_0.Rdata")
saveRDS(simulation_study(sd_intercept = 0), file = "study_sd_0")
saveRDS(simulation_study(sd_intercept = 1), file = "study_sd_1")
saveRDS(simulation_study(sd_intercept = 2), file = "study_sd_2")
saveRDS(simulation_study(sd_intercept = 5), file = "study_sd_5")
saveRDS(simulation_study(sd_intercept = 10), file = "study_sd_10")
saveRDS(simulation_study(sd_intercept = 20), file = "study_sd_20")
analyse <- function(x){
boxplot(beta_0 ~ method, data = x)
boxplot(beta_iq ~ method, data = x)
boxplot(beta_treatment ~ method, data = x)
boxplot(SE_beta_0 ~ method, data = x)
boxplot(SE_beta_iq ~ method, data = x)
boxplot(SE_beta_treatment ~ method, data = x)
boxplot(p_value_0 ~ method, data = x)
boxplot(p_value_iq ~ method, data = x)
boxplot(p_value_treatment ~ method, data = x)
power_lm <- sum(ifelse(x$p_value_treatment[x$method == "lm"] < 0.05, 1, 0))/100
power_rim <- sum(ifelse(x$p_value_treatment[x$method == "rim"] < 0.05, 1, 0))/100
power_rism <- sum(ifelse(x$p_value_treatment[x$method == "rism"] < 0.05, 1, 0))/100
}
analyse(test)
analyse(test)
study_sd_0 <- readRDS(file = file = "study_sd_0")
study_sd_0 <- readRDS(file = "study_sd_0")
study_sd_1 <- readRDS(file = "study_sd_1")
study_sd_2 <- readRDS(file = "study_sd_2")
study_sd_5 <- readRDS(file =  "study_sd_5")
study_sd_10 <- readRDS(file = "study_sd_10")
study_sd_20 <- readRDS(file = "study_sd_20")
analyse(study_sd_0)
analyse(study_sd_0)
View(study_sd_0)
analyse(study_sd_1)
analyse(study_sd_2)
analyse(study_sd_5)
View(study_sd_5)
analyse(study_sd_10)
View(study_sd_10)
analyse <- function(x){
boxplot(beta_0 ~ method, data = x)
boxplot(beta_iq ~ method, data = x)
boxplot(beta_treatment ~ method, data = x)
boxplot(SE_beta_0 ~ method, data = x)
boxplot(SE_beta_iq ~ method, data = x)
boxplot(SE_beta_treatment ~ method, data = x)
boxplot(p_value_0 ~ method, data = x)
boxplot(p_value_iq ~ method, data = x)
boxplot(p_value_treatment ~ method, data = x)
power_lm <- sum(ifelse(x$p_value_treatment[x$method == "lm"] < 0.05, 1, 0))/100
power_rim <- sum(ifelse(x$p_value_treatment[x$method == "rim"] < 0.05, 1, 0))/100
power_rism <- sum(ifelse(x$p_value_treatment[x$method == "rism"] < 0.05, 1, 0))/100
return(print(c(power_lm, power_rim, power_rism)))
}
analyse(study_sd_10)
analyse(study_sd_20)
analyse(study_sd_0)
analyse(study_sd_1)
analyse(study_sd_2)
analyse(study_sd_5)
View(study_sd_5)
analyse(study_sd_10)
analyse(study_sd_20)
View(study_sd_20)
View(study_sd_5)
analyse <- function(x){
boxplot(beta_0 ~ method, data = x)
boxplot(beta_iq ~ method, data = x)
boxplot(beta_treatment ~ method, data = x)
boxplot(SE_beta_0 ~ method, data = x)
boxplot(SE_beta_iq ~ method, data = x)
boxplot(SE_beta_treatment ~ method, data = x)
boxplot(p_value_0 ~ method, data = x)
boxplot(p_value_iq ~ method, data = x)
boxplot(p_value_treatment ~ method, data = x)
power_lm <- sum(ifelse(x$p_value_treatment[x$method == "lm"] < 0.05, 1, 0))/100
power_rim <- sum(ifelse(x$p_value_treatment[x$method == "rim"] < 0.05, 1, 0))/100
power_rism <- sum(ifelse(x$p_value_treatment[x$method == "rism"] < 0.05, 1, 0))/100
return(print(c(power_lm, power_rim, power_rism, x$empirical_icc, x$theoretical_icc)))
}
analyse(study_sd_20)
View(study_sd_20)
analyse <- function(x){
boxplot(beta_0 ~ method, data = x)
boxplot(beta_iq ~ method, data = x)
boxplot(beta_treatment ~ method, data = x)
boxplot(SE_beta_0 ~ method, data = x)
boxplot(SE_beta_iq ~ method, data = x)
boxplot(SE_beta_treatment ~ method, data = x)
boxplot(p_value_0 ~ method, data = x)
boxplot(p_value_iq ~ method, data = x)
boxplot(p_value_treatment ~ method, data = x)
power_lm <- sum(ifelse(x$p_value_treatment[x$method == "lm"] < 0.05, 1, 0))/100
power_rim <- sum(ifelse(x$p_value_treatment[x$method == "rim"] < 0.05, 1, 0))/100
power_rism <- sum(ifelse(x$p_value_treatment[x$method == "rism"] < 0.05, 1, 0))/100
eicc <- x$empirical_icc
ticc <- x$theoretical_icc
return(print(c(power_lm, power_rim, power_rism, eicc, ticc)))
}
analyse(study_sd_20)
analyse <- function(x){
boxplot(beta_0 ~ method, data = x)
boxplot(beta_iq ~ method, data = x)
boxplot(beta_treatment ~ method, data = x)
boxplot(SE_beta_0 ~ method, data = x)
boxplot(SE_beta_iq ~ method, data = x)
boxplot(SE_beta_treatment ~ method, data = x)
boxplot(p_value_0 ~ method, data = x)
boxplot(p_value_iq ~ method, data = x)
boxplot(p_value_treatment ~ method, data = x)
power_lm <- sum(ifelse(x$p_value_treatment[x$method == "lm"] < 0.05, 1, 0))/100
power_rim <- sum(ifelse(x$p_value_treatment[x$method == "rim"] < 0.05, 1, 0))/100
power_rism <- sum(ifelse(x$p_value_treatment[x$method == "rism"] < 0.05, 1, 0))/100
eicc <- mean(x$empirical_icc)
ticc <- mean(x$theoretical_icc)
return(print(c(power_lm, power_rim, power_rism, eicc, ticc)))
}
analyse(study_sd_20)
simulation_study <- function(niter = 100, sd_intercept = 10, sd_slope = 0,
corr = 0, sd_error = 5){
# loading one simulation function
source("one_simulation_ml.R")
# creating data frame for coefs
coef_models <- data.frame()
# adding coefs for n iterations
for(i in 1:niter){
coef_models <- rbind(coef_models, one_simulation(sd_intercept = sd_intercept,
sd_slope = sd_slope, corr = corr, sd_error))
}
# formatting data frame
colnames(coef_models) <- c("beta_0", "beta_iq", "beta_treatment",
"SE_beta_0", "SE_beta_iq", "SE_beta_treatment", "p_value_0",
"p_value_iq", "p_value_treatment","empirical_icc",
"theoretical_icc", "method")
coef_models[,1:12] <- apply(coef_models[,1:12], 2, as.numeric)
coef_models$sample_nr <- rep(1:niter, each = 3)
return(coef_models)
}
simulation_study <- function(niter = 100, sd_intercept = 10, sd_slope = 0,
corr = 0, sd_error = 5){
# loading one simulation function
source("one_simulation_ml.R")
# creating data frame for coefs
coef_models <- data.frame()
# adding coefs for n iterations
for(i in 1:niter){
coef_models <- rbind(coef_models, one_simulation(sd_intercept = sd_intercept,
sd_slope = sd_slope, corr = corr, sd_error))
}
# formatting data frame
colnames(coef_models) <- c("beta_0", "beta_iq", "beta_treatment",
"SE_beta_0", "SE_beta_iq", "SE_beta_treatment", "p_value_0",
"p_value_iq", "p_value_treatment","empirical_icc",
"theoretical_icc", "method")
coef_models[,1:11] <- apply(coef_models[,1:11], 2, as.numeric)
coef_models$sample_nr <- rep(1:niter, each = 3)
return(coef_models)
}
# testing function
library(MASS)
library(lme4)
library(lmerTest)
saveRDS(simulation_study(sd_intercept = 0), file = "study_sd_0")
saveRDS(simulation_study(sd_intercept = 1), file = "study_sd_1")
saveRDS(simulation_study(sd_intercept = 2), file = "study_sd_2")
saveRDS(simulation_study(sd_intercept = 5), file = "study_sd_5")
saveRDS(simulation_study(sd_intercept = 10), file = "study_sd_10")
saveRDS(simulation_study(sd_intercept = 20), file = "study_sd_20")
study_sd_0 <- readRDS(file = "study_sd_0")
study_sd_1 <- readRDS(file = "study_sd_1")
study_sd_2 <- readRDS(file = "study_sd_2")
study_sd_5 <- readRDS(file =  "study_sd_5")
study_sd_10 <- readRDS(file = "study_sd_10")
study_sd_20 <- readRDS(file = "study_sd_20")
analyse(study_sd_0)
analyse(study_sd_1)
analyse(study_sd_2)
analyse(study_sd_5)
analyse(study_sd_10)
analyse(study_sd_20)
analyse <- function(x){
boxplot(beta_0 ~ method, data = x)
boxplot(beta_iq ~ method, data = x)
boxplot(beta_treatment ~ method, data = x)
boxplot(SE_beta_0 ~ method, data = x)
boxplot(SE_beta_iq ~ method, data = x)
boxplot(SE_beta_treatment ~ method, data = x)
boxplot(p_value_0 ~ method, data = x)
boxplot(p_value_iq ~ method, data = x)
boxplot(p_value_treatment ~ method, data = x)
power_lm <- sum(ifelse(x$p_value_treatment[x$method == "lm"] < 0.05, 1, 0))/100
power_rim <- sum(ifelse(x$p_value_treatment[x$method == "rim"] < 0.05, 1, 0))/100
power_rism <- sum(ifelse(x$p_value_treatment[x$method == "rism"] < 0.05, 1, 0))/100
eicc <- mean(x$empirical_icc)
ticc <- mean(x$theoretical_icc)
return(print(round(c(power_lm, power_rim, power_rism, eicc, ticc), digits = 3)))
}
analyse(study_sd_5)
analyse(study_sd_20)
install.packages("arm")
library(arm)
lvl2units<-30,
lvl1unitsperlvl2unit<-50,
targetICC<-0.01,
sigma.a<-0.5 ## use 2.5 for ICC 0.2
lvl2units<-30
lvl1unitsperlvl2unit<-50
targetICC<-0.01
sigma.a<-0.5 ## use 2.5 for ICC 0.2
totalnumberoflines<-lvl2units *lvl1unitsperlvl2unit,
subjectspercondition<-totalnumberoflines/2
totalnumberoflines<-lvl2units *lvl1unitsperlvl2unit
subjectspercondition<-totalnumberoflines/2
ICCinfbound<-targetICC-0.001
ICCsupbound<-targetICC + 0.001
j<-0,
counter<-0
j<-0
counter<-0
zr<-c(0,0,0,0,0,0,0)
rho<-0.56
mu.a<-0
mu.b<-3
sigma.b<-4
sigma.y<-1
replications<-5000
group<-rep(1:lvl2units,rep(lvl1unitsperlvl2unit,lvl2units))
cond<-gl(2,subjectspercondition)
lvl2groups<-gl(lvl2units,lvl1unitsperlvl2unit)
Sigma.ab<-array(c(sigma.a^2,rho*sigma.a*sigma.b,rho*sigma.a*s
igma.b,sigma.b^2),c(2,2))
Sigma.ab<-array(c(sigma.a^2,rho*sigma.a*sigma.b,rho*sigma.a*sigma.b,sigma.b^2),c(2,2))
repeat { ab<-mvrnorm(lvl1unitsperlvl2unit,c(mu.a,mu.b),Sigma.ab),
a<-ab[,1],
b<-ab[,2]
x<-rnorm(lvl2units*lvl1unitsperlvl2unit)
a<-rnorm(lvl2units*lvl1unitsperlvl2unit,a[group] + b*x,sigma.y)
data
lm.fit<-lm(data∼cond),
sumary<-summary(lm.fit),
cond.estimate<-sumary$coefficients[2]
cond.se<-sumary$coefficients[4],
t.value<-cond.estimate/cond.se,
p.value<-sumary$coefficients[8]
lm.lvl2groups.fit<-lm(data∼lvl2groups)
MSEwithin<-anova(lm.lvl2groups.fit)[2,2]/anova(lm.lvl2groups.
fit)[2,1]
MSEgroups<-anova(lm.lvl2groups.fit)[1,2]/anova(lm.lvl2groups.
fit)[1,1]
MSEbetween<-((MSEgroups-MSEwithin)/lvl1unitsperlvl2unit)
ICC<-MSEbetween/(MSEwithin + MSEbetween),
t.Kish.correctn<-sqrt((1 + (lvl1unitsperlvl2unit-1)*ICC))
Kishcorrctd.t.value<-t.value/t.Kish.correctn
Kishcorrectd.p.value<-2*pt(-abs(Kishcorrctd.t.value),anova(lm.fit)[2,1])
if(ICC>ICCinfbound){ if(ICC < ICCsupbound){
counter<-counter + 1
zr<-c(zr,counter,t.value,p.value,ICC,t.Kish.correctn,Kishcorrctd.t.value,Kishcorrectd.p.value)}}
j<-counter, if(j>(replications-1)) break }
?gl
analyse(study_sd_0)
# testing plots and comparing coefs
analyse <- function(x){
boxplot(beta_0 ~ method, data = x)
boxplot(beta_iq ~ method, data = x)
boxplot(beta_treatment ~ method, data = x)
boxplot(SE_beta_0 ~ method, data = x)
boxplot(SE_beta_iq ~ method, data = x)
boxplot(SE_beta_treatment ~ method, data = x)
boxplot(p_value_0 ~ method, data = x)
boxplot(p_value_iq ~ method, data = x)
boxplot(p_value_treatment ~ method, data = x)
power_lm <- sum(ifelse(x$p_value_treatment[x$method == "lm"] < 0.05, 1, 0))/100
power_rim <- sum(ifelse(x$p_value_treatment[x$method == "rim"] < 0.05, 1, 0))/100
power_rism <- sum(ifelse(x$p_value_treatment[x$method == "rism"] < 0.05, 1, 0))/100
eicc <- mean(x$empirical_icc)
ticc <- mean(x$theoretical_icc)
return(print(round(c(power_lm, power_rim, power_rism, eicc, ticc), digits = 3)))
}
simulation_study <- function(niter = 100, sd_intercept = 10, sd_slope = 0,
corr = 0, sd_error = 5){
# loading one simulation function
source("one_simulation_ml.R")
# creating data frame for coefs
coef_models <- data.frame()
# adding coefs for n iterations
for(i in 1:niter){
coef_models <- rbind(coef_models, one_simulation(sd_intercept = sd_intercept,
sd_slope = sd_slope, corr = corr, sd_error))
}
# formatting data frame
colnames(coef_models) <- c("beta_0", "beta_iq", "beta_treatment",
"SE_beta_0", "SE_beta_iq", "SE_beta_treatment", "p_value_0",
"p_value_iq", "p_value_treatment","empirical_icc",
"theoretical_icc", "method")
coef_models[,1:11] <- apply(coef_models[,1:11], 2, as.numeric)
coef_models$sample_nr <- rep(1:niter, each = 3)
return(coef_models)
}
# testing function
library(MASS)
library(lme4)
library(lmerTest)
study_sd_0 <- readRDS(file = "study_sd_0")
study_sd_1 <- readRDS(file = "study_sd_1")
study_sd_2 <- readRDS(file = "study_sd_2")
study_sd_5 <- readRDS(file =  "study_sd_5")
study_sd_10 <- readRDS(file = "study_sd_10")
study_sd_20 <- readRDS(file = "study_sd_20")
analyse(study_sd_0)
analyse(study_sd_1)
analyse(study_sd_2)
analyse(study_sd_5)
analyse(study_sd_10)
analyse(study_sd_20)
View(study_sd_20)
saveRDS(simulation_study(sd_intercept = 0), file = "study_sd_0_no_eff")
saveRDS(simulation_study(sd_intercept = 1), file = "study_sd_1_no_eff")
saveRDS(simulation_study(sd_intercept = 2), file = "study_sd_2_no_eff")
saveRDS(simulation_study(sd_intercept = 5), file = "study_sd_5_no_eff")
saveRDS(simulation_study(sd_intercept = 10), file = "study_sd_10_no_eff")
saveRDS(simulation_study(sd_intercept = 20), file = "study_sd_20_no_eff")
study_sd_0_no_eff <- readRDS(file = "study_sd_0_no_eff")
study_sd_1_no_eff <- readRDS(file = "study_sd_1_no_eff")
study_sd_2_no_eff <- readRDS(file = "study_sd_2_no_eff")
study_sd_5_no_eff <- readRDS(file =  "study_sd_5_no_eff")
study_sd_10_no_eff <- readRDS(file = "study_sd_10_no_eff")
study_sd_20_no_eff <- readRDS(file = "study_sd_20_no_eff")
analyse(study_sd_0_no_eff)
analyse(study_sd_1_no_eff)
analyse(study_sd_2_no_eff)
analyse(study_sd_5_no_eff)
analyse(study_sd_10_no_eff)
analyse(study_sd_20_no_eff)
analyse(study_sd_0)
analyse(study_sd_1)
analyse(study_sd_2)
analyse(study_sd_5)
analyse(study_sd_10)
analyse(study_sd_20)

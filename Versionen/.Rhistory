labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 20)
# Regression Aggregation
ggplot(data = data_aggr, mapping = aes(x = uebung, y = leistung))+
geom_point(size = 2)+
geom_smooth(method = "lm", se = FALSE, col = "red", size = 1) +
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 20)
# Regression Aggregation
ggplot(data = data_aggr, mapping = aes(x = uebung, y = leistung))+
geom_point(size = 2)+
geom_smooth(method = "lm", se = FALSE, col = "red", size = 1) +
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point()+
geom_abline(intercept = coef(as4)[1], slope = coef(as4)[2], size = 1)+
facet_wrap(~klasse)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point()+
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
facet_wrap(~klasse)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
lm0 <- lmer(leistung ~ (1|klasse), data = test)
summary(lm0)
12 / 56
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.7, 0.2))
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(1, 1))
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0, 1))
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.2, 1))
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.1, 1))
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.1, 0.9))
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.1, 0.8))
# Regression Disagregation
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.1, 0.8))
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.1, 0.7))
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.1, 0.7), legend.direction = "horizontal")
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.4, 0.0), legend.direction = "horizontal")
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.4, 0.9), legend.direction = "horizontal")
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal")
# Regression Disagregation
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal")
?geom_smooth
ggplot(data = test, mapping = aes(x = uebung, y = leistung, group = klasse))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal")
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal")
install.packages("gridExtra")
library(gridExtra)
# Regression Disagregation
a <-ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal")
grid.arrange(a, b)
grid.arrange(a, b, nrow = 1)
?grid.arrange
grid.arrange(a, b, nrow = 1, bottom = "hallo")
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse, size = 1)) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal")
grid.arrange(a, b, nrow = 1)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse),  size = 1) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal")
grid.arrange(a, b, nrow = 1)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse),  size = 2) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal")
grid.arrange(a, b, nrow = 1)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse),  size = 3) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal")
grid.arrange(a, b, nrow = 1)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse),  size = 3) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal",
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
grid.arrange(a, b, nrow = 1)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse),  size = 3) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal",
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank())
grid.arrange(a, b, nrow = 1)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse),  size = 3) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal",
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank())
grid.arrange(a, b, nrow = 1)
# Regression Disagregation
a <-ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = element_blank(), y = "Punktzahl") +
theme_gray(base_size = 15)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse),  size = 3) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = element_blank(), y = "", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal",
axis.ticks.y= element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank())
grid.arrange(a, b, nrow = 1, bottom = "Anzahl gelöster Übungsaufgaben")
grid.arrange(a, b, nrow = 1, bottom = textGrob("Anzahl gelöster Übungsaufgaben", fontsize = 15))
install.packages("grid")
install.packages("grid")
install.packages("gridBase")
library(gridBase)
grid.arrange(a, b, nrow = 1, bottom = textGrob("Anzahl gelöster Übungsaufgaben", fontsize = 15))
library(xtable)
library(MASS)
library(dplyr)
library(tidyr)
library(lme4)
library(ggplot2)
library(gridExtra)
library(gridBase)
grid.arrange(a, b, nrow = 1, bottom = textGrob("Anzahl gelöster Übungsaufgaben", fontsize = 15))
grid.arrange(a, b, nrow = 1, bottom = "Anzahl gelöster Übungsaufgaben", fontsize = 15)
grid.arrange(a, b, nrow = 1, bottom = "Anzahl gelöster Übungsaufgaben")
grid.arrange(a, b, nrow = 1, bottom = "Anzahl gelöster Übungsaufgaben", fontsize = 15)
grid.arrange(a, b, nrow = 1, bottom = "Anzahl gelöster Übungsaufgaben")
# Regression Disagregation
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point(aes(shape = klasse),  size = 3) +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "", shape = "Klasse") +
theme_gray(base_size = 15) +
theme(legend.position = c(0.3, 0.9), legend.direction = "horizontal")
as4 <- lm(data = test, leistung ~ uebung)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point()+
geom_abline(intercept = coef(as4)[1], slope = coef(as4)[2], size = 1)+
facet_wrap(~klasse)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point()+
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
facet_wrap(~klasse)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point()+
geom_abline(intercept = coef(as4)[1], slope = coef(as4)[2], size = 1, col = "red")+
facet_wrap(~klasse)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point()+
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
facet_wrap(~klasse)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
grid.arrange(a,b, nrow = 1)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point()+
geom_abline(intercept = coef(as4)[1], slope = coef(as4)[2], size = 1, col = "red")+
facet_wrap(~klasse)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
grid.arrange(a,b, nrow = 1)
# Regression Disagregation
a <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
grid.arrange(a,b, nrow = 1)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point()+
geom_abline(intercept = coef(as4)[1], slope = coef(as4)[2], size = 1, col = "red")+
facet_wrap(~klasse)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15) +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank())
grid.arrange(a,b, nrow = 1)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point()+
geom_abline(intercept = coef(as4)[1], slope = coef(as4)[2], size = 1, col = "red")+
facet_wrap(~klasse)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15) +
theme(axis.title.y = element_blank())
grid.arrange(a,b, nrow = 1)
b <- ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point()+
geom_abline(intercept = coef(as4)[1], slope = coef(as4)[2], size = 1, col = "red")+
facet_wrap(~klasse)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15) +
theme(axis.title.y = element_blank())
grid.arrange(a,b, nrow = 1)
ggplot(data = test, mapping = aes(x = uebung, y = leistung))+
geom_point()+
geom_smooth(method = "lm", se = FALSE, col = "red", fullrange = TRUE)+
facet_wrap(~klasse)+
labs(x = "Anzahl gelöster Übungsaufgaben", y = "Punktzahl") +
theme_gray(base_size = 15)
lm0 <- lmer(leistung ~ (1|klasse), data = test)
summary(lm0)
# function to analyse data
power_analyze <- function(x){
y10 = c(0, 0.25, 0.5, 0.75, 1, 1.5)
sd_i = c(0,1,2,3,4,5)
meth = c("lm", "rim")
a <- matrix(ncol = 6, nrow = 6)
b <- matrix(ncol = 6, nrow = 6)
for (m in 1){
for (n in 1:6){
for (i in 1:6){
a[n,i] <- sum(ifelse(x$p_value_likelihood[x$method == meth[m] & x$effect_treatment == y10[i] & x$sd_intercept == sd_i[n]] < 0.05, 1, 0))/
length(x$p_value_likelihood[x$method == meth[m] & x$effect_treatment == y10[i] & x$sd_intercept == sd_i[n]])
}
}
}
for (m in 2){
for (n in 1:6){
for (i in 1:6){
b[n,i] <- sum(ifelse(x$p_value_likelihood[x$method == meth[m] & x$effect_treatment == y10[i] & x$sd_intercept == sd_i[n]] < 0.05, 1, 0))/
length(x$p_value_likelihood[x$method == meth[m] & x$effect_treatment == y10[i] & x$sd_intercept == sd_i[n]])
}
}
}
power <- rbind(a, b)
sd_i2 <- sd_i^2
icc <- sd_i2 / (sd_i2 + 25)
icc <- rep(icc, each = 6, times = 2)
eff <- rep(y10, times = 12)
methods <- rep(meth, each = 36)
pwr <- c()
for (i in 1: 12){
pwr <- append(pwr, power[i,])
}
power_matrix <- matrix(c(pwr, eff, round(icc, digits = 2), methods), ncol = 4, nrow = 72)
power_dataframe <- data.frame(power_matrix)
power_dataframe[,1] <- as.numeric(as.character(power_dataframe[,1]))
colnames(power_dataframe) <- c("power", "effectsize_treatment", "theoretical_icc", "method")
ggplot(data = power_dataframe, mapping = aes(x = theoretical_icc , y = power, group = method)) +
geom_line(aes(color = method)) +
labs(title = "Veränderung von Power / Typ-1 Fehler in versch. Einflussstärken eines Treatments") +
facet_wrap(~ effectsize_treatment)
}
# Simulating test study
source("simulation_study.R")
gen_ml_data <- function(n = 15000, nklassen = 300, sd_intercept = 2, sd_slope = 2,
corr = 0, sd_error = 5, b00 = 15, b10 = 0.35){
# Creating Treatment as Level-1 Variable
uebung <- sample(rep(c(0:29), each = n/length(c(0:29))), n)
klasse <- rep(1:nklassen, each = n/nklassen)
# Creating Treatment as Level-2 Variable
# anz_math_lektionen <- sample(c(0:6), n, replace = TRUE)
# math_lektionen <- c()
# for (i in 1:n){
#   math_lektionen[i] <- anz_math_lektionen[klasse[i]]
# }
# Creating random effects of klassen
covar01 <- corr * sqrt(sd_intercept^2 * sd_slope^2)
effekte_cov_matrix <- matrix(c(sd_intercept^2,
covar01,
covar01,
sd_slope^2
), 2, 2)
effekte <- mvrnorm(n = nklassen, mu = c(0,0),
Sigma = effekte_cov_matrix, empirical = TRUE)
effekt_int <- effekte[,1]
effekt_slope <- effekte[,2]
# Creating random effects for Intercept and Slope based on klassen
random_intercept <- numeric(n)
for (i in 1:n){
random_intercept[i] <- effekt_int[klasse[i]]
}
random_slope <- numeric(n)
for (i in 1:n){
random_slope[i] <- effekt_slope[klasse[i]]
}
# Creating random error for individuals
error <- rnorm(n, mean = 0, sd = sd_error)
# Calculating individual leistung score
leistung <- b00 +
b10 * uebung +
random_intercept +
random_slope * uebung +
error
# Creating dataframe
klasse <- as.factor(klasse)
levels(klasse) <- paste("Kl", 1:nklassen, sep = ".")
ml_data <- data.frame(klasse, uebung, leistung, random_intercept, random_slope)
return(ml_data)
}
one_simulation <- function(n = 15000, nklassen = 300, sd_intercept = 2, sd_slope = 0,
corr = 0, sd_error = 5, y00 = 15, y10 = 0.35){
# loading dgp function
source("dgp_multi_ml.R")
# generating one data set
ml_data <- gen_ml_data(n = n, nklassen = nklassen, sd_intercept = sd_intercept,
sd_slope = sd_slope,
corr = corr, sd_error = sd_error, y00 = y00, y10 = y10)
# calculating model
lm_model_0 <- lm(leistung ~ 1, data = ml_data)
lm_model <- lm(leistung ~  math_lektionen * klasse, data = ml_data)
mlm_model_0 <- lmer(leistung ~ 1 + (1 | klasse), data = ml_data, REML = FALSE)
mlm_I_model <- lmer(leistung ~ math_lektionen +
(1 | klasse), data = ml_data, REML = FALSE)
mlm_IS_model <- lmer(leistung ~ math_lektionen +
(math_lektionen | klasse), data = ml_data)
# saving coefficients
empirical_icc <- VarCorr(mlm_model_0)$klasse[1,1] / (VarCorr(mlm_model_0)$klasse[1,1]
+ sigma(mlm_model_0)^2)
theoretical_icc <- var(ml_data$random_intercept) / var(ml_data$leistung)
beta_lm <- coef(lm_model)
SE_lm <- coef(summary(lm_model))[,2]
p_lm <- coef(summary(lm_model))[,4]
lq_lm <- anova(lm_model_0, lm_model, test = "LRT")
p_lq_lm <- lq_lm$`Pr(>Chi)`[2]
beta_I_mlm <- fixef(mlm_I_model)
SE_I_mlm <- summary(mlm_I_model)$coefficient[,2]
p_I_mlm <- coef(summary(mlm_I_model))[,5]
lq_I_mlm <- anova(mlm_model_0, mlm_I_model, test = "LRT")
p_lq_I_mlm <- lq_I_mlm$`Pr(>Chisq)`[2]
beta_IS_mlm <- fixef(mlm_IS_model)
SE_IS_mlm <- summary(mlm_IS_model)$coefficient[,2]
p_IS_mlm <- coef(summary(mlm_IS_model))[,5]
lq_IS_mlm <- anova(mlm_I_model, mlm_IS_model, test = "LRT")
p_lq_IS_mlm <- lq_IS_mlm$`Pr(>Chisq)`[2]
# saving all coefficients in a matrix
coefs <- matrix(c(beta_lm, SE_lm, p_lm, p_lq_lm, empirical_icc, theoretical_icc, sd_intercept, sd_error, y10, "lm",
beta_I_mlm, SE_I_mlm, p_I_mlm, p_lq_I_mlm, empirical_icc, theoretical_icc, sd_intercept, sd_error, y10, "rim",
beta_IS_mlm, SE_IS_mlm, p_IS_mlm, p_lq_IS_mlm, empirical_icc, theoretical_icc, sd_intercept, sd_error, y10,"rism"
),
ncol = 13, byrow = TRUE)
return(coefs)
}
simulation_study <- function(n = 15000, nklassen = 300, niter = 100, sd_intercept = 2,
sd_slope = 2, corr = 0, sd_error = 5, y00 = 15, y10 = 0.35){
# loading one simulation function
source("one_simulation_ml.R")
# creating data frame for coefs
coef_models <- data.frame()
# adding coefs for n iterations
for(num in 1:length(sd_intercept)){
for(fix_eff in 1:length(y10)){
for(i in 1:niter){
coef_models <- rbind(coef_models, one_simulation(n = n, nklassen = nklassen,
sd_intercept = sd_intercept[num],
sd_slope = sd_slope, corr = corr,
sd_error = sd_error,
y00 = y00, y10 = y10[fix_eff]))
}
print(paste(fix_eff, "out of", length(y10), "fixed effects simulated"))
}
print(paste(num, "out of", length(sd_intercept), "SDs simulated"))
}
print("*** Simulation Complete ***")
# formatting data frame
colnames(coef_models) <- c("beta_0", "beta_treatment",
"SE_beta_0", "SE_beta_treatment", "p_value_0",
"p_value_treatment", "p_value_likelihood", "empirical_icc",
"theoretical_icc", "sd_intercept", "sd_error", "effect_treatment",
"method")
coef_models[,1:9] <- apply(coef_models[,1:9], 2, as.character)
coef_models[,1:9] <- apply(coef_models[,1:9], 2, as.numeric)
return(coef_models)
}
ok <- simulation_study()
